import Head from "next/head";
import Image from "next/image";
import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import { SignIn, useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import { Header } from "~/components/Header";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { LoadingPage } from "~/components/UI/loading";

dayjs.extend(relativeTime);

const CreatePostForm = () => {
  const { user } = useUser();
  if (!user) return null;
  return (
    <form className="flex">
      <input
        placeholder="type some emojis!"
        className="grow bg-transparent outline-none"
      />
    </form>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  return (
    <div
      key={post.id}
      className="flex items-center gap-2 rounded border border-gray-500/50 p-2"
    >
      <Image
        className="h-10 w-10 rounded-full"
        src={author.profileImageUrl}
        alt={`${author.username || "author"} profile picture`}
        height={56}
        width={56}
      />
      <div className="flex flex-col">
        <div className="text-gray-400">
          <span className="">{`@${author.username || "not found"}`}</span>
          <span className="font-thin">{` â€¢ ${dayjs(
            post.createdAt
          ).fromNow()}`}</span>
        </div>
        <div>{post.content}</div>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();
  if (postsLoading) return <LoadingPage />;
  if (!data) return <div>There is no data ðŸ˜­</div>;

  return (
    <div className="flex flex-col gap-2">
      {data?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  // start fetching asap
  api.posts.getAll.useQuery();

  if (!userLoaded) return <LoadingPage />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center text-gray-800 bg-gray-50 dark:text-gray-100 dark:bg-gray-950">
        {!isSignedIn && (
          <SignIn path="/sign-in" routing="path" signUpUrl="/sign-up" />
        )}
        <Header />
        <div className="container flex w-full flex-col">
          <CreatePostForm />
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
